Java Notes 

*First Created 2019/9/12

1. 集合 Collection

	1. List<E> (interface) 顺序列表 ordered collection

		1. 实现类 Implements class: 
			要正确Override equals()方法
			1. LinkedList
				List<E> = new LinkedList<>(); 
			2. ArrayList
				List<E> = new ArrayList<>();

		1. 常用方法 Methods: 
			1. 在末尾添加:
				void add(E e)
			2. 指定index处添加:
				void add(int index, E e)
			3. 删除指定index元素:
				E remove(int index) ?
			4. 删除某个元素:
				boolean remove(Object e) ?
			5. 根据index获取元素:
				E get(int index)
			6. 获取大小(元素个数):
				int size()
			7. 判断list是否包含某个元素:
				boolean contains(Object o) 调用equals()判断是否相同
				自定义类需要正确Override equals()方法
		    8. 返回某个元素的index:
		    	int indexOf(Object o)
		    	如果元素不存在返回-1

		3. 遍历 Traverse:
			1. 使用get()
				for(int i = 0; i < list.size(); i++){
					E e = list.get(i);
				}
			2. 使用Iterator
				for(Iterator<E> it = list.iterator(); it.hasNext();){
					E e = it.next();
				}
				简化
					for(E e : list){
					}

		4. List转化为Array
				toArray参数中传入一个跟list大小一样的array
				E[] array = list.toArray(new E[list.size()])

		5. Array转化为List
				E[] array = {...};
				List<E> list = List.of(array)；
				** List.of() 返回read-only list，不能更改

	2. Map<K key, V value> (interface) 储存 key-value pair

		1. 实现类 Implements class:
			1. HashMap 无序 接口为 Map
				Map<K key, V value> map = new HashMap<>();
				作为key的对象要正确Override equals() 和 hashCode()方法
			2. TreeMap 有序，以key的顺序排序 接口为SortedMap
				Map<K key, V value> map = new TreeMap<>()
				作为key的对象要实现Comparable接口
				Map<K key, V value> map = new TreeMap<>(new Comparator<K>(){
					public int compare(K key1, K key2){
						return -1: key1 smaller
							    0: same
							    1: key1 larger;
					}
				});

		2. 常用方法 Methods:
			1. 放入key-value对
				key 不能重复
				V put(K key, V value) 
				如果key不在map中，返回null；如果key已经存在，替换原来的value并返回被替换的value
			2. 通过key查询value
				V get(K key)
				key不存在，返回null

		3. 遍历 Traverse：
			1. 遍历key的集合 keySet()
				for(K key : map.keySet()){
					V value = map.get(key);
				}
			2. 遍历key-value的集合 entrySet()
				for(Map.Entry<K, V> entry: map.entrySet()){
					K key = entry.getKey();
					V value = entry.getValue();
				}

	3. Set<E> 储存不重复元素 经常用于除掉重复元素

		1. 实现类 Implements class:
			1. HashSet
				Set<E> = new HashSet<>();
				无序，接口为Set，需要Override equals() 和 hashCode()方法
			2. TreeSet
				Set<E> = new TreeSet<>();
				有序，接口为SortedSet，需要Override equals() 和 hashCode()方法

		2. 常用方法 Methods:
			1. 添加元素
				boolean add(E e)
				返回true，添加成功；返回false， 元素已经存在
			2. 删除元素
				boolean remove(Object e)
				返回true，删除成功；返回false，元素不存在
			3. 判断是否包含元素
				boolean contains(Object e)

		3. 遍历 Traverse
			1. for each 循环
				for(E e : map){
				}

	4. Queue<E> FIFO 先进先出

		1. 实现类 Implements class:
			1. LinkedList
				Queue<E> q = new LinkedList<>();

		2. 常用方法 Methods:
			1. 获取队列长度
				int size();
			2. 添加元素到队尾
				1. boolean add(E e); 超出队列长度 throw exception
				2. boolean offer(E e); 超出队列长度 返回 false
			3. 获取队首元素并从队列中删除
				1. E remove(); 队列为空 throw exception
				2. E poll(); 队列为空 返回 null，不要添加null进队列
			3. 获取队首元素但不删除
				1. E element(); 队列为空 throw exception
				2. E peek()； 队列为空 返回null，不要添加null进队列

	5. PriorityQueue<E> 放入其中的元素必须实现Comparable接口

		1. 实现类 Implements class:
			1. PriorityQueue
				Queue<E> q = new PriorityQueue<>(new UserComparator());
				实现Comparable接口
				class UserComparator implements Comparator<E>{
					public int compare(E e1, E e2){
						return -1 e1 smaller
								0 same
								1 e1 larger
					}
				}

		2. 方法 Methods:
			Same as Queue.

	6. Deque<E> Double Ended Queue

		1. 实现类 Implements class:
			1. LinkedList
				Deque<E> deque = new LinkedList<>();

		2. 方法 Methods:
			1. 添加元素到队首
				addFirst(E e) 如果超过大小throw exception
				offerFirst(E e) 如果超过大小返回false
			2. 添加元素到队尾
				addLast(E e) 如果超过大小throw exception
				offerLast(E e) 如果超过大小返回 false
			3. 取队队首元素并删除
				E removeFirst() 如果空throw exception
				E pollFirst() 如果空返回false
			4. 取队首元素不删除
				E getFirst() 如果空throw exception
				E peekFirst() 如果空返回false
			5. 取队尾元素并删除
				E removeLast() 如果空throw exception
				E pollLast() 如果空返回false
			6. 取队尾元素不删除
				E getLast() 如果空throw exception
				E peeklast() 如果空返回false




